version: "3.9"

services:
  traefik:
    image: traefik:v2.11
    container_name: traefik
    command:
      - "--log.level=DEBUG"
      - "--api.dashboard=true"
      - "--entrypoints.web.address=:8080"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--accesslog=true"
      - "--providers.file.filename=/etc/traefik/middlewares.yaml" # middleware JWT
    ports:
      - "8080:8080" # Traefik dashboard + proxy HTTP
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/middlewares.yaml:/etc/traefik/middlewares.yaml:ro
    networks:
      - app-net

  database:
    container_name: micro_db
    image: "postgres:alpine"
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=docker
    networks:
      - app-net

  redpanda:
    container_name: micro_redpanda
    image: redpandadata/redpanda:latest
    ports:
      - "9092:9092"
      - "9644:9644"
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp 1
      - --memory 1G
      - --reserve-memory 0M
      - --node-id 0
      - --check=false
      - --kafka-addr PLAINTEXT://0.0.0.0:9092
      - --advertise-kafka-addr PLAINTEXT://micro_redpanda:9092
    networks:
      - app-net

  users-api:
    container_name: micro_users
    build:
      context: ./apps/users
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - redpanda
      - database
    networks:
      - app-net
    env_file:
      - ./apps/users/.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.users-api.rule=Path(`/users`)"
      - "traefik.http.routers.users-api.entrypoints=web"
      - "traefik.http.routers.users-api.service=users-api-service"
      - "traefik.http.services.users-api-service.loadbalancer.server.port=3000"
      # - "traefik.http.routers.users-api.middlewares=users-jwt"

networks:
  app-net:
    driver: bridge
